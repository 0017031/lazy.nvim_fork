*lazy.nvim.txt*          For NVIM v0.5.0         Last change: 2022 November 29

==============================================================================
Table of Contents                                *lazy.nvim-table-of-contents*

1. lazy.nvim                                             |lazy.nvim-lazy.nvim|
  - Features                                              |lazy.nvim-features|
  - TODO                                                      |lazy.nvim-todo|
  - Differences with Packer                |lazy.nvim-differences-with-packer|

==============================================================================
1. lazy.nvim                                             *lazy.nvim-lazy.nvim*

FEATURES                                                  *lazy.nvim-features*


- Partial clones instead of shallow clones
- waits till missing deps are installed (bootstrap Neovim and start using it right away)
- Async
- No need for compile
- Fast
- Correct sequencing of dependencies (deps should always be opt. Maybe make everything opt?)
- Import specs from Packer
- Config in multiple files
- Patterns for local packages
- Profiling
- lockfile
- upvalues in `config` & `init`
- check for updates
- package.lua
- package-lock.lua
- tag/version support `git tag --sort version:refname`
- auto-loading on completion for lazy-loaded commands
- bootstrap code
- semver https://devhints.io/semver
    https://semver.npmjs.com/


TODO                                                          *lazy.nvim-todo*


- health checks: check merge conflicts async
- allow setting up plugins through config
- support for Plugin.lock
- defaults for git log
- view keybindings for update/clean/â€¦
- add profiler to view
- add buttons for actions
- show time taken for op in view
- package meta index (package.lua cache for all packages)
- auto lazy-loading of lua modules
- use uv file watcher to check for config changes
- clear errors
- add support for versions `git tag --sort v:refname`
- rename requires to dependencies
- move tasks etc to Plugin.state
- handlers imply opt
- dependencies imply opt for deps
- fix local plugin spec
- investigate all opt=true. Simplifies logic (easily switch between opt/start afterwards)
- add support to specify `engines`, `os` and `cpu` like in `package.json`


DIFFERENCES WITH PACKER                    *lazy.nvim-differences-with-packer*


- **Plugin Spec**:
    - `setup` => `init`
    - `requires` => `dependencies`
    - `as` => `name`


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:

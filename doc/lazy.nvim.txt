*lazy.nvim.txt*          For NVIM v0.5.0         Last change: 2022 December 14

==============================================================================
Table of Contents                                *lazy.nvim-table-of-contents*

1. lazy.nvim                                             |lazy.nvim-lazy.nvim|
  - Features                                              |lazy.nvim-features|
  - TODO                                                      |lazy.nvim-todo|
  - Profiler                                              |lazy.nvim-profiler|
  - Differences with Packer                |lazy.nvim-differences-with-packer|
  - Other Neovim Plugin Managers in Lua|lazy.nvim-other-neovim-plugin-managers-in-lua|

==============================================================================
1. lazy.nvim                                             *lazy.nvim-lazy.nvim*

Modern plugin manager for Neovim

<div class="figure">
<img src="https://user-images.githubusercontent.com/292349/207702945-6f1e7c89-9076-430b-b9e1-0bae8864a772.png" title="fig:"/>
<p class="caption">image</p>
</div>

FEATURES                                                  *lazy.nvim-features*


- Manage all your Neovim plugins with a fancy UI
- Fast startup: Automatically caches and compiles byte code of all lua modules needed during startup
- Partial clones instead of shallow clones
- Auto lazy-loading of lua modules
- Lazy-loading on events, commands, filetypes and key mappings
- Automatically installs missing plugins before starting up so you can start using Neovim right away
- Async execution for improved performance
- No need to manually compile plugins
- Correct sequencing of dependencies
- Configurable in multiple files
- Dev option and patterns for using local plugin
- Profiling tools to optimize performance
- Lockfile `lazy-lock.json` to keep track of installed plugin versions
- Automatically check for updates
- Commit, branch, tag, version, and full Semver <https://devhints.io/semver> support
- Statusline component to see the number of pending updates


TODO                                                          *lazy.nvim-todo*


- fancy UI to manage all your Neovim plugins
- auto lazy-loading of lua modules
- lazy-loading on events, commands, filetypes and key mappings
- Partial clones instead of shallow clones
- waits till missing deps are installed (bootstrap Neovim and start using it
    right away)
- Async
- No need to manually compile
- Fast. Automatically caches and compiles byte code of all lua modules needed
    during startup
- Correct sequencing of dependencies (deps should always be opt. Maybe make
    everything opt?)
- Config in multiple files
- dev option and patterns for local packages
- Profiling
- lockfile `lazy-lock.json`
- upvalues in `config` & `init`
- automatically check for updates
- commit, branch, tag, version and full semver support
- statusline component to see number of pending updates
- semver https://devhints.io/semver
- auto-loading on completion for lazy-loaded commands
- bootstrap code
- Background update checker
- health checks: check merge conflicts async
    - unsupported props or props from other managers
    - other packages still in site?
    - other package manager artifacts still present? compiled etc
- status page showing running handlers and cache stats
- temp colorscheme used during startup when installing missing plugins
- automatically reloads when config changes are detected
- handlers imply opt
- dependencies imply opt for deps
- show spec errors in health
- fix plugin details
- show disabled plugins (strikethrough?)
- log file
- git tests
- Import specs from other plugin managers
- packspec <https://github.com/nvim-lua/nvim-package-specification>
    - add support to specify `engines`, `os` and `cpu` like in `package.json`
    - semver merging. Should check if two or more semver ranges are compatible and calculate the union range
        - default semver merging strategy: if no version matches all, then use highest version?
    - package meta index (package.lua cache for all packages)


PROFILER                                                  *lazy.nvim-profiler*

<div class="figure">
<img src="https://user-images.githubusercontent.com/292349/207703263-3b38ca45-9779-482b-b684-4f8c3b3e76d0.png" title="fig:"/>
<p class="caption">image</p>
</div>

<div class="figure">
<img src="https://user-images.githubusercontent.com/292349/207703522-8bb20678-bb4c-4424-80e4-add3219711c3.png" title="fig:"/>
<p class="caption">image</p>
</div>

DIFFERENCES WITH PACKER                    *lazy.nvim-differences-with-packer*


- **Plugin Spec**:
    - `setup` => `init`
    - `requires` => `dependencies`
    - `as` => `name`
    - `opt` => `lazy`
    - `run` => `build`
    - `lock` => `pin`
    - `module` is auto-loaded. No need to specify


OTHER NEOVIM PLUGIN MANAGERS IN LUA*lazy.nvim-other-neovim-plugin-managers-in-lua*


- packer.nvim <https://github.com/wbthomason/packer.nvim>
- paq-nvim <https://github.com/savq/paq-nvim>
- neopm <https://github.com/ii14/neopm>
- dep <https://github.com/chiyadev/dep>
- optpack.nvim <https://github.com/notomo/optpack.nvim>
- pact.nvim <https://github.com/rktjmp/pact.nvim>


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
